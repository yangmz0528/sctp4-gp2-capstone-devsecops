name: Simple Manual Workflow

on:  
  push: 
     branches:
     - dev


jobs:
     dev:
     # The type of runner that the job will run on

          runs-on: ubuntu-latest
          environment: ${{ github.ref_name }}
          steps:
           - uses: actions/checkout@v2
           - name: Run a script
             run: | 
               echo "I am running a job in the ${{ github.ref }} environment"
          
          - name: Checkout
            uses: actions/checkout@v2

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v1
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ vars.AWS_REGION }}
          
          # Build, tag deploy image to ECR
           - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v1

             - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
            run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
            - name: Download task definition
            run: |
            aws ecs describe-task-definition --task-definition $TASKDEF --query taskDefinition > task-definition.json

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: task-definition.json
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ steps.build-image.outputs.image }}

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }}
              service: ${{ env.ECS_SERVICE }}
              cluster: ${{ env.ECS_CLUSTER }}
              wait-for-service-stability: true
        
           - name: Run Trivy Scan
             uses: aquasecurity/trivy-action@master
             with:
              image-ref: #your-docker-image:tag
              format: 'json'
              output: 'trivy-results.json'

           - name: Upload Trivy scan results to GitHub Security tab
             uses: github/codeql-action/upload-sarif@v2
             with:
              json_file: 'trivy-results.json'
          
    
    #  staging:
    #       runs-on: ubuntu-latest
    #       environment: staging
    #       needs: dev

    #       steps:
    #        - uses: actions/checkout@v2
    #        - name: Run a script
    #          run: | 
    #            echo "I am running a job in the staging environment"

    #       - name: image-scan

    #  prod:
    #       runs-on: ubuntu-latest
    #       environment: prod
    #       needs: staging
          
    #       steps:
    #        - uses: actions/checkout@v2
    #        - name: Run a script
    #          run: | 
    #            echo "I am running a job in the prod environment"
      
     


