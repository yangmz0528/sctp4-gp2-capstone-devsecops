name: Dev Workflow

on:  
 workflow_dispatch:
    
env:                 
  ECR_REPOSITORY: group2-ecr       
  ECS_SERVICE: group2-ecs-http         
  ECS_CLUSTER: group2-ecs                    
  CONTAINER_NAME: ecs-group2-py
  TASKDEF: group2-ecs-http
  AWS_REGION: ap-southeast-1

jobs:
  build-image-ecr:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag image & push to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . 
          docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
  
  # Run the security scans
  security-scans:      
    runs-on: ubuntu-latest
    needs: build-image-ecr
    env:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ap-southeast-1
    steps:
    - name: Trivy Image Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 255945442255.dkr.ecr.ap-southeast-1.amazonaws.com/group2-ecr:43abb27c09484bd9e6ed12efbee83c336d9f7216
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'

    # - name: Run Snyk to check for vulnerabilities
    #   uses: snyk/actions/node@master
    #   env:
    #      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #      command: monitor
    #      args: --severity-threshold=high

  # Push from ECR to ECS
  ecr-to-ecs:
    runs-on: ubuntu-latest
    needs: [security-scans]
    steps:
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $TASKDEF --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    
    #  staging:
    #       runs-on: ubuntu-latest
    #       environment: staging
    #       needs: dev

    #       steps:
    #        - uses: actions/checkout@v2
    #        - name: Run a script
    #          run: | 
    #            echo "I am running a job in the staging environment"

    #       - name: image-scan

    #  prod:
    #       runs-on: ubuntu-latest
    #       environment: prod
    #       needs: staging
          
    #       steps:
    #        - uses: actions/checkout@v2
    #        - name: Run a script
    #          run: | 
    #            echo "I am running a job in the prod environment"
      
     


