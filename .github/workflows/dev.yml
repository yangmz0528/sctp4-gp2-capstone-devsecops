name: Dev Workflow

on:  
 # workflow_dispatch: 
 push:
    branches: [dev, '*']

env:                 
  ECR_REPOSITORY: group2-ecr       
  ECS_SERVICE: group2-ecs-http         
  ECS_CLUSTER: group2-ecs                    
  CONTAINER_NAME: ecs-group2-py
  TASKDEF: group2-ecs-http
  AWS_REGION: ap-southeast-1

jobs:
  # Build, tag image and store it in ECR
  build-image-ecr:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.build-image.outputs.image_uri }}
    environment: ${{ github.ref_name }}
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag image & push to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
        echo "ECR_REGISTRY=$ECR_REGISTRY"
        echo "ECR_REPOSITORY=$ECR_REPOSITORY"
        echo "IMAGE_TAG=$IMAGE_TAG"
        echo "image_uri=why is this so hard?" >> $GITHUB_OUTPUT  
             
    # - name: Set a test output
    #   id: set_output
    #   run: echo "test_output=hello_world" >> $GITHUB_OUTPUT

  # Run the security scans
  security-scans:      
    runs-on: ubuntu-latest
    needs: build-image-ecr
    steps:

    - name: Use test output
      run: echo "The output from build-image-ecr was ${{ needs.build-image-ecr.outputs.output1 }}"

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION}}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2
    #   with:
    #     mask-password: 'true'

    # - name: Trivy Image Scan
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '${{ needs.build-image-ecr.outputs.image }}'
    #     format: 'table'
    #     severity: 'CRITICAL,HIGH'

    # - name: Run Snyk to check for vulnerabilities
    #   uses: snyk/actions/node@master
    #   env:
    #      SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    #   with:
    #      command: monitor
    #      args: --severity-threshold=high

  # Push from ECR to ECS
  # ecr-to-ecs:
  #   runs-on: ubuntu-latest
  #   needs: [security-scans]
  #   steps:
  #   - name: Download task definition
  #     run: |
  #       aws ecs describe-task-definition --task-definition $TASKDEF --query taskDefinition > task-definition.json

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: task-definition.json
  #       container-name: ${{ env.CONTAINER_NAME }}
  #       image: ${{ needs.build-image-ecr.outputs.image }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: ${{ env.ECS_SERVICE }}
  #       cluster: ${{ env.ECS_CLUSTER }}
  #       wait-for-service-stability: true
      
     


