name: Dev multi-job Workflow
on:  
  push:
    branches: [ 'main','dev', "jody/zap"]
  workflow_dispatch: 

env:                 
  ECR_REPOSITORY: sctp-ce4-grp2-ecr       
  ECS_SERVICE:  sctp-ce4-grp2-ecs         
  ECS_CLUSTER: sctp-ce4-grp2-ecs                    
  CONTAINER_NAME: sctp-ce4-grp2-ecs
  TASKDEF: sctp-ce4-grp2-ecs

jobs:
  # Job 1: Run Snyk Scan & SAST Scan (Bandit)
  snyk-scan:
    name: snyk scan
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
       - uses: actions/checkout@master
       - name: Run Snyk to check for vulnerabilities
         uses: snyk/actions/python@master
         env:
           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
         with:
          args: --severity-threshold=high
  
  sast-scan:
    name: bandit scan
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}
    steps:
       - name: Checkout code
         uses: actions/checkout@v4
       - name: Install Bandit
         run: pip install bandit
       - name: Run Bandit Scan
         run: bandit -r . -lll -iii

  # Job 2: Build, tag image and store it in ECR
  build-image-ecr:
    runs-on: ubuntu-latest
    needs:
      - snyk-scan
      - sast-scan
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    environment: ${{ github.ref_name }}
    steps:

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr # Define an id which allows other steps to reference outputs from this step.
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag image & push to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo " The image uri is ${{ steps.build-image.outputs.image_uri }}"  

  # Job 3: Run Trivy vulnerability scan on image stored in ECR
  trivy-vul-scan:      
    runs-on: ubuntu-latest
    needs: build-image-ecr
    environment: ${{ github.ref_name }}
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        image-ref: '${{ needs.build-image-ecr.outputs.image_uri }}'
        format: 'table'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  # Job 4: Push from ECR to ECS
  ecr-to-ecs:
    runs-on: ubuntu-latest
    needs: [trivy-vul-scan, build-image-ecr]
    outputs:
      ecs_public_id: ${{ steps.get-ip.outputs.ecs_public_id }}
    environment: ${{ github.ref_name }}
    steps:
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Download task definition 
      run: |
        aws ecs describe-task-definition --task-definition $TASKDEF --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1.2.0
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: '${{ needs.build-image-ecr.outputs.image_uri }}'

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get Public IP of ECS Task
      id: get-ip
      run: |
        ENI_ID=$(aws ecs describe-tasks --cluster ${{ env.ECS_Cluster }} --tasks $(aws ecs list-tasks --cluster ${{ env.ECS_Cluster }} --query 'taskArns[0]' --output text) --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
        echo "ecs_public_id=$public_ip" >> $GITHUB_OUTPUT
        echo " The image uri is ${{ steps.get-ip.outputs.ecs_public_id }}"  
      
  # Job 5: Perform a Dynamic Appplication Security Test
  zap-scan:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: ecr-to-ecs
    steps:
      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          # The 'target' parameter specifies the URL of the deployed application to be scanned.
          target: ${{ needs.ecr-to-ecs.outputs.ecs_public_id }}

  # Job 6: Creates an automated pull request to main after previous jobs are completed
  create-PR-to-main: 
    runs-on: ubuntu-latest
    needs: ecr-to-ecs
    # only run when the environment is dev
    if: ${{ github.ref_name }} == 'dev' 
    permissions: 
      contents: write
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: 'main'

    - name: Reset dev branch
      run: |
        git fetch origin dev:dev
        git reset --hard dev

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        branch: 'dev'
        commit-message: Update from Dev Environment
        title: 'Update from Dev Environment'
        body: Automatic pull request from Dev to Main after successful deployment.
        labels: automated pr
        
      
     


