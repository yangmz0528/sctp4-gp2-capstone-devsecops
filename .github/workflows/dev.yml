name: Dev multi-job Workflow
on:  
 workflow_dispatch: 
 push:
    branches: dev

env:                 
  ECR_REPOSITORY: sctp-ce4-grp2-ecr       
  ECS_SERVICE:  sctp-ce4-grp2-ecs         
  ECS_CLUSTER: sctp-ce4-grp2-ecs                    
  CONTAINER_NAME: sctp-ce4-grp2-ecs
  TASKDEF: sctp-ce4-grp2-ecs

jobs:
  # Job 1: Run Snyk Scan and SAST Scan (Bandit)
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@master
       - name: Run Snyk to check for vulnerabilities
         uses: snyk/actions/python@master
         env:
           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
         with:
          args: --severity-threshold=high
  sast-scan:
    name: Run Bandit Scan
    runs-on: ubuntu-latest
    steps:
       - name: Checkout code
         uses: actions/checkout@v3
       - name: Install Bandit
         run: pip install bandit
       - name: Run Bandit Scan
         run: bandit -r . -lll -iii

  # Job 2: Build, tag image and store it in ECR
  build-image-ecr:
    runs-on: ubuntu-latest
    needs:
      - snyk-scan
      - sast-scan
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    environment: ${{ github.ref_name }}
    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build, tag image & push to ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest . 
        docker push $ECR_REGISTRY/$ECR_REPOSITORY -a
        echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT  

  # Job 3: Run Trivy vulnerability scan on image stored in ECR
  trivy-vul-scan:      
    runs-on: ubuntu-latest
    needs: build-image-ecr
    environment: ${{ github.ref_name }}
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'image'
        image-ref: '${{ needs.build-image-ecr.outputs.image_uri }}'
        format: 'table'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  # Job 4: Push from ECR to ECS
  ecr-to-ecs:
    runs-on: ubuntu-latest
    needs: trivy-vul-scan
    environment: ${{ github.ref_name }}
    steps:
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $TASKDEF --query taskDefinition > task-definition.json
    
    - name: Get image URI from previous job
      id: get_image_uri
      run: |
        echo "image_uri=${{ needs.build-image-ecr.outputs.image_uri }}" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: '${{ needs.build-image-ecr.outputs.image_uri }}'

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  # Job 5: Create PR to main branch
  create-PR-to-main: 
    runs-on: ubuntu-latest
    needs: ecr-to-ecs
    steps:
    - name: Create Pull Request to Main
      uses: peter-evans/create-pull-request@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: dev
        title: Update from Dev Environment
        body: Automatic pull request creation from Dev to Main after successful deployment.
      
     


